within MultizoneOfficeComplexAir.BaseClasses.HVACSide.BaseClasses.Component;
package FlowMover "\"Component used for modelling fans and pumps\""
  model VariableSpeedMover
    "The component contains both the variable speed fan/pump and the controller"
    import BuildingControlEmulator =
           MultizoneOfficeComplexAir.BaseClasses.HVACSide.BaseClasses.Component;
    extends BaseClasses.FlowMover(withoutMotor(varSpeFloMov(riseTime=240)));
    parameter Real k(min=0, unit="1") = 1 "Gain of controller";
    parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small) = 0.5
      "Time constant of Integrator block";

    BuildingControlEmulator.conPI variableSpeed
      annotation (Placement(transformation(extent={{-60,44},{-40,64}})));
    Modelica.Blocks.Interfaces.RealInput SetPoi
      "Connector of setpoint input signal"
      annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
    Modelica.Blocks.Interfaces.RealInput Mea
      "Connector of measurement input signal"
      annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
  equation
    connect(withoutMotor.port_a, temEnt.port_b) annotation (Line(
        points={{-18,0},{-60,0}},
        color={0,127,255},
        thickness=1));
    connect(temEnt.port_a, port_a) annotation (Line(
        points={{-80,0},{-100,0}},
        color={0,127,255},
        thickness=1));
    connect(withoutMotor.port_b, temLea.port_a) annotation (Line(
        points={{2,0},{30,0}},
        color={0,127,255},
        thickness=1));
    connect(temLea.port_b, masFloRat.port_a) annotation (Line(
        points={{50,0},{60,0}},
        color={0,127,255},
        thickness=1));
    connect(masFloRat.port_b, port_b) annotation (Line(
        points={{80,0},{100,0}},
        color={0,127,255},
        thickness=1));
    connect(preEnt.port, temEnt.port_b) annotation (Line(
        points={{-42,-20},{-42,0},{-60,0}},
        color={0,127,255},
        thickness=1));
    connect(preLea.port, temLea.port_a) annotation (Line(
        points={{20,-20},{20,0},{30,0}},
        color={0,127,255},
        thickness=1));
    connect(withoutMotor.P, P) annotation (Line(
        points={{3,6},{12,6},{20,6},{20,40},{110,40}},
        color={0,0,127}));
    connect(variableSpeed.y, withoutMotor.u) annotation (Line(
        points={{-39,54},{-30,54},{-30,6},{-19,6}},
        color={0,0,127}));
    connect(On, variableSpeed.On) annotation (Line(
        points={{-120,60},{-62,60}},
        color={255,0,255}));
    connect(variableSpeed.set, SetPoi) annotation (Line(
        points={{-62,54},{-78,54},{-78,20},{-120,20}},
        color={0,0,127}));
    connect(variableSpeed.mea, Mea) annotation (Line(
        points={{-62,48},{-66,48},{-66,16},{-56,16},{-56,-60},{-120,-60}},
        color={0,0,127}));
    annotation (Icon(graphics={
          Polygon(points={{-40,60},{-40,-60},{60,0},{-40,60}}, lineColor={28,108,
                200}),
          Text(
            extent={{-30,24},{28,-28}},
            lineColor={28,108,200},
            textString="V")}));
  end VariableSpeedMover;

  model VAVSupFan
    "The AHU supply fan and the controller"
    extends BaseClasses.FlowMover;
    parameter Real k(min=0, unit="1") = 1 "Gain of controller";
    parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small) = 0.5
      "Time constant of Integrator block";
    parameter Modelica.Units.SI.Time waitTime(min=0) = 0
      "Wait time before transition fires";
    parameter Real SpeRat
        "Speed ratio";
    parameter Integer numTemp(min=1) = 1
        "The size of the temeprature vector";
    Control.VAVDualFanControl varSpe(
      k=k,
      Ti=Ti,
      waitTime=waitTime)
      annotation (Placement(transformation(extent={{-60,44},{-40,64}})));
    Modelica.Blocks.Interfaces.RealInput pSet
      "Connector of setpoint input signal"
      annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
    Modelica.Blocks.Interfaces.RealInput pMea
      "Connector of measurement input signal" annotation (Placement(
          transformation(extent={{-140,-120},{-100,-80}})));
    Modelica.Blocks.Interfaces.RealOutput yRet "Output signal connector"
      annotation (Placement(transformation(extent={{100,-92},{120,-72}})));
    Control.TemperatureCheck TChe(numTemp=numTemp)
      annotation (Placement(transformation(extent={{-92,-50},{-72,-30}})));
    Modelica.Blocks.Interfaces.RealInput T[numTemp]
      "Connector of setpoint input signal" annotation (Placement(
          transformation(extent={{-140,-80},{-100,-40}})));
    Modelica.Blocks.Interfaces.RealInput cooTSet[numTemp]
      "Connector of setpoint input signal"
      annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
    Modelica.Blocks.Interfaces.RealInput heaTSet[numTemp]
      "Connector of setpoint input signal"
      annotation (Placement(transformation(extent={{-140,80},{-100,120}})));
    Buildings.Utilities.IO.SignalExchange.Overwrite oveSpeSupFan(
        description="AHU supply fan speed control signal", u(
        min=0,
        max=1,
        unit="1"))
      annotation (Placement(transformation(extent={{-26,44},{-6,64}})));
    Modelica.Blocks.Math.Gain gain(k=SpeRat)
      annotation (Placement(transformation(extent={{16,50},{24,58}})));
  equation
    connect(withoutMotor.port_a, temEnt.port_b) annotation (Line(
        points={{-18,0},{-60,0}},
        color={0,140,72},
        thickness=0.5));
    connect(temEnt.port_a, port_a) annotation (Line(
        points={{-80,0},{-100,0}},
        color={0,140,72},
        thickness=0.5));
    connect(withoutMotor.port_b, temLea.port_a) annotation (Line(
        points={{2,0},{30,0}},
        color={0,140,72},
        thickness=0.5));
    connect(temLea.port_b, masFloRat.port_a) annotation (Line(
        points={{50,0},{60,0}},
        color={0,140,72},
        thickness=0.5));
    connect(masFloRat.port_b, port_b) annotation (Line(
        points={{80,0},{100,0}},
        color={0,140,72},
        thickness=0.5));
    connect(preEnt.port, temEnt.port_b) annotation (Line(
        points={{-42,-20},{-42,0},{-60,0}},
        color={0,140,72},
        thickness=0.5));
    connect(preLea.port, temLea.port_a) annotation (Line(
        points={{20,-20},{20,0},{30,0}},
        color={0,140,72},
        thickness=0.5));
    connect(withoutMotor.P, P) annotation (Line(
        points={{3,6},{12,6},{20,6},{20,40},{110,40}},
        color={0,0,127}));
    connect(On, varSpe.On)
      annotation (Line(points={{-120,60},{-62,60}}, color={255,0,255}));
    connect(varSpe.SetPoi, pSet) annotation (Line(points={{-62,56},{-80,56},
            {-80,20},{-120,20}}, color={0,0,127}));
    connect(varSpe.Mea, pMea) annotation (Line(points={{-62,52},{-66,52},{-66,
            16},{-56,16},{-56,-100},{-120,-100}}, color={0,0,127}));
    connect(TChe.Temp, T) annotation (Line(points={{-94,-40},{-100,-40},{-100,
            -60},{-120,-60}}, color={0,0,127}));
    connect(TChe.On, varSpe.CyclingOn) annotation (Line(points={{-71,-40},{
            -68,-40},{-68,48},{-62,48}}, color={255,0,255}));
    connect(TChe.CooSetPoi, cooTSet) annotation (Line(points={{-94,-34},{-98,
            -34},{-98,-20},{-120,-20}}, color={0,0,127}));
    connect(TChe.HeaSetPoi, heaTSet) annotation (Line(points={{-94,-46},{-98,
            -46},{-98,-60},{-60,-60},{-60,34},{-88,34},{-88,100},{-120,100}},
          color={0,0,127}));
    connect(varSpe.ySup, oveSpeSupFan.u)
      annotation (Line(points={{-39,54},{-28,54}}, color={0,0,127}));
    connect(oveSpeSupFan.y, withoutMotor.u) annotation (Line(points={{-5,54},
            {2,54},{2,26},{-30,26},{-30,6},{-19,6}},     color={0,0,127}));
    connect(oveSpeSupFan.y, gain.u)
      annotation (Line(points={{-5,54},{15.2,54}}, color={0,0,127}));
    connect(gain.y, yRet) annotation (Line(points={{24.4,54},{32,54},{32,
            -82},{110,-82}}, color={0,0,127}));
    annotation (Icon(graphics={
          Polygon(points={{-40,60},{-40,-60},{60,0},{-40,60}}, lineColor={28,108,
                200}),
          Text(
            extent={{-30,24},{28,-28}},
            lineColor={28,108,200},
            textString="V"),
          Text(
            extent={{-152,106},{148,146}},
            textString="%name",
            textColor={0,0,255})}));
  end VAVSupFan;

  package BaseClasses "\"Base classes for modelling fans or pumps\""
    partial model FlowMover
      replaceable package Medium = Modelica.Media.Interfaces.PartialMedium "Medium for the fluid";
      parameter Real HydEff[:] "Hydraulic efficiency";
      parameter Real MotEff[:] "Motor efficiency";
      parameter Modelica.Units.SI.VolumeFlowRate VolFloCur[:]
        "Volume flow rate curve";
      parameter Modelica.Units.SI.Pressure PreCur[:] "Pressure curve";
      parameter Modelica.Units.SI.Time TimCon "Time constant for the fluid";
      WithoutMotor             withoutMotor(
        redeclare package Medium = Medium,
        HydEff=HydEff,
        MotEff=MotEff,
        VolFloCur=VolFloCur,
        PreCur=PreCur,
        TimCon=TimCon)
        annotation (Placement(transformation(extent={{-18,-10},{2,10}})));
      Modelica.Fluid.Sensors.TemperatureTwoPort temEnt(redeclare package
          Medium =
            Medium)
        annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
      Modelica.Fluid.Sensors.TemperatureTwoPort temLea(redeclare package
          Medium =
            Medium)
        annotation (Placement(transformation(extent={{30,-10},{50,10}})));
      Modelica.Fluid.Sensors.MassFlowRate masFloRat(redeclare package Medium =
            Medium)
        annotation (Placement(transformation(extent={{60,-10},{80,10}})));
      Modelica.Fluid.Sensors.Pressure preEnt(redeclare package Medium = Medium)
        annotation (Placement(transformation(extent={{-32,-20},{-52,-40}})));
      Modelica.Fluid.Sensors.Pressure preLea(redeclare package Medium = Medium)
        annotation (Placement(transformation(extent={{30,-20},{10,-40}})));
      Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium = Medium)
        "Fluid connector a (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium = Medium)
        "Fluid connector b (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{90,-10},{110,10}})));
      Modelica.Blocks.Interfaces.RealOutput P "Electrical power consumed"
        annotation (Placement(transformation(extent={{100,30},{120,50}})));
      Modelica.Blocks.Interfaces.BooleanInput On "On-off signal" annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
      Modelica.Blocks.Interfaces.RealOutput Rat
        "Actual normalised pump speed that is used for computations"
        annotation (Placement(transformation(extent={{100,-70},{120,-50}})));
    equation
      connect(withoutMotor.port_a, temEnt.port_b) annotation (Line(
          points={{-18,0},{-60,0}},
          color={0,127,255},
          thickness=1));
      connect(temEnt.port_a, port_a) annotation (Line(
          points={{-80,0},{-100,0}},
          color={0,127,255},
          thickness=1));
      connect(withoutMotor.port_b, temLea.port_a) annotation (Line(
          points={{2,0},{30,0}},
          color={0,127,255},
          thickness=1));
      connect(temLea.port_b, masFloRat.port_a) annotation (Line(
          points={{50,0},{60,0}},
          color={0,127,255},
          thickness=1));
      connect(masFloRat.port_b, port_b) annotation (Line(
          points={{80,0},{100,0}},
          color={0,127,255},
          thickness=1));
      connect(preEnt.port, temEnt.port_b) annotation (Line(
          points={{-42,-20},{-42,0},{-60,0}},
          color={0,127,255},
          thickness=1));
      connect(preLea.port, temLea.port_a) annotation (Line(
          points={{20,-20},{20,0},{30,0}},
          color={0,127,255},
          thickness=1));
      connect(withoutMotor.P, P) annotation (Line(
          points={{3,6},{12,6},{20,6},{20,40},{110,40}},
          color={0,0,127}));
      connect(withoutMotor.Rat, Rat) annotation (Line(
          points={{3,-6},{12,-6},{12,-60},{110,-60}},
          color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Polygon(points={{-40,60},{-40,-60},{60,0},{-40,60}}, lineColor={28,108,
                  200}),
            Ellipse(
              extent={{-80,80},{80,-80}},
              lineColor={28,108,200})}), Diagram(coordinateSystem(
              preserveAspectRatio=false)));
    end FlowMover;

    model WithoutMotor
      "Model for fans or pumps where motors are not explicitly modelled"
      replaceable package Medium = Modelica.Media.Interfaces.PartialMedium "Medium for the fluid";
      parameter Real HydEff[:] "Hydraulic efficiency";
      parameter Real MotEff[:] "Motor efficiency";
      parameter Modelica.Units.SI.VolumeFlowRate VolFloCur[:]
        "Volume flow rate curve";
      parameter Modelica.Units.SI.Pressure PreCur[:] "Pressure curve";
      parameter Modelica.Units.SI.Time TimCon "Time constant for the fluid";
      Buildings.Fluid.Movers.SpeedControlled_y varSpeFloMov(
        redeclare package Medium = Medium,
        per(
          pressure(V_flow=VolFloCur, dp=PreCur),
          hydraulicEfficiency(eta=HydEff, V_flow=VolFloCur),
          motorEfficiency(eta=MotEff, V_flow=VolFloCur)),
        tau=TimCon,
        energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
        use_inputFilter=false)
                    annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
      Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium = Medium)
        "Fluid connector a (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium = Medium)
        "Fluid connector b (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{90,-10},{110,10}})));

      Modelica.Blocks.Interfaces.RealInput u "control signal"
        annotation (Placement(transformation(extent={{-120,50},{-100,70}})));
      Modelica.Blocks.Interfaces.RealOutput P "Electrical power consumed"
        annotation (Placement(transformation(extent={{100,50},{120,70}})));
      Modelica.Blocks.Interfaces.RealOutput Rat
        "Actual normalised pump speed that is used for computations"
        annotation (Placement(transformation(extent={{100,-70},{120,-50}})));
    equation
      connect(varSpeFloMov.port_a, port_a)
        annotation (Line(
          points={{-10,0},{-10,0},{-100,0}},
          color={0,140,72},
          thickness=0.5));
      connect(varSpeFloMov.port_b, port_b)
        annotation (Line(
          points={{10,0},{56,0},{100,0}},
          color={0,140,72},
          thickness=0.5));
      connect(varSpeFloMov.P, P) annotation (Line(
          points={{11,9},{40,9},{40,60},{110,60}},
          color={0,0,127}));
      connect(varSpeFloMov.y_actual, Rat) annotation (Line(
          points={{11,7},{40,7},{40,-60},{110,-60}},
          color={0,0,127}));
      connect(u,varSpeFloMov. y) annotation (Line(points={{-110,60},{0,60},
              {0,12}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Polygon(points={{-40,60},{-40,-60},{60,0},{-40,60}}, lineColor={28,108,
                  200}),
            Ellipse(
              extent={{-80,80},{80,-80}},
              lineColor={28,108,200}),
            Text(
              extent={{-30,24},{28,-28}},
              lineColor={28,108,200},
              textString="NoMotor"),
            Text(
              extent={{-150,108},{150,148}},
              textString="%name",
              textColor={0,0,255})}),                                Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end WithoutMotor;

  end BaseClasses;

  package Control
    model CyclingOn
      "\"Controller for constant speed fans or pumps\""
      parameter Modelica.Units.SI.Time waitTime(min=0) = 0
        "Wait time before transition fires";

      Modelica.StateGraph.StepWithSignal On(nOut=2, nIn=1)
                                            annotation (Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=-90,
            origin={56,-44})));
      Modelica.StateGraph.InitialStepWithSignal Off(nIn=2, nOut=1)
                                                    annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=-90,
            origin={54,42})));
      inner Modelica.StateGraph.StateGraphRoot stateGraphRoot
        annotation (Placement(transformation(extent={{-80,72},{-60,92}})));
      Modelica.StateGraph.TransitionWithSignal transitionWithSignal(enableTimer=true, waitTime=
           waitTime)
        annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=-90,
            origin={0,-40})));
      Modelica.StateGraph.TransitionWithSignal transitionWithSignal1 annotation (
          Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={54,0})));
      Modelica.Blocks.Interfaces.BooleanInput CyclingOn
        annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
      Modelica.Blocks.Logical.Not not1
        annotation (Placement(transformation(extent={{-60,-50},{-40,-30}})));
      Modelica.Blocks.Interfaces.BooleanOutput OnSigOut
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      Modelica.Blocks.Interfaces.BooleanInput OnSigIn
        annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
      Modelica.Blocks.Logical.And and1
        annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
      Modelica.StateGraph.TransitionWithSignal transitionWithSignal2(waitTime=
            waitTime, enableTimer=false)
        annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=-90,
            origin={-22,48})));
      Modelica.Blocks.Logical.Not not2
        annotation (Placement(transformation(extent={{-60,38},{-40,58}})));
    equation
      connect(transitionWithSignal.inPort, On.outPort[1]) annotation (Line(
          points={{-6.66134e-016,-44},{-6.66134e-016,-80},{55.75,-80},{55.75,-54.5}},
          color={0,0,0},
          pattern=LinePattern.Dash));
      connect(transitionWithSignal.outPort, Off.inPort[1]) annotation (Line(
          points={{2.22045e-016,-38.5},{0,-38.5},{0,60},{53.5,60},{53.5,53}},
          color={0,0,0},
          pattern=LinePattern.Dash));

      connect(Off.outPort[1], transitionWithSignal1.inPort) annotation (Line(
          points={{54,31.5},{54,20},{54,4}},
          color={0,0,0},
          pattern=LinePattern.Dash));
      connect(transitionWithSignal1.outPort, On.inPort[1]) annotation (Line(
          points={{54,-1.5},{54,-12},{54,-33},{56,-33}},
          color={0,0,0},
          pattern=LinePattern.Dash));
      connect(not1.y, transitionWithSignal.condition) annotation (Line(
          points={{-39,-40},{-12,-40}},
          color={255,0,255},
          pattern=LinePattern.Dash));
      connect(not1.u, CyclingOn) annotation (Line(
          points={{-62,-40},{-96,-40},{-96,0},{-120,0}},
          color={255,0,255},
          pattern=LinePattern.Dash));
      connect(On.active, OnSigOut) annotation (Line(
          points={{67,-44},{67,-44},{80,-44},{80,0},{110,0}},
          color={255,0,255},
          pattern=LinePattern.Dash));
      connect(and1.u1, OnSigIn) annotation (Line(
          points={{-62,0},{-86,0},{-86,40},{-120,40}},
          color={255,0,255},
          pattern=LinePattern.Dash));
      connect(and1.u2, CyclingOn) annotation (Line(
          points={{-62,-8},{-90,-8},{-90,0},{-120,0}},
          color={255,0,255},
          pattern=LinePattern.Dash));
      connect(and1.y, transitionWithSignal1.condition) annotation (Line(
          points={{-39,0},{-39,0},{-8,0},{42,0}},
          color={255,0,255},
          pattern=LinePattern.Dash));
      connect(transitionWithSignal2.inPort, On.outPort[2]) annotation (Line(
          points={{-22,44},{-22,44},{-22,42},{-22,36},{-22,-96},{56.25,-96},{56.25,
              -54.5}},
          color={0,0,0},
          pattern=LinePattern.Dash));
      connect(transitionWithSignal2.outPort, Off.inPort[2]) annotation (Line(
          points={{-22,49.5},{-22,49.5},{-22,74},{54.5,74},{54.5,53}},
          color={0,0,0},
          pattern=LinePattern.Dash));
      connect(OnSigIn, not2.u) annotation (Line(
          points={{-120,40},{-86,40},{-86,48},{-62,48}},
          color={255,0,255},
          pattern=LinePattern.Dash));
      connect(not2.y, transitionWithSignal2.condition) annotation (Line(
          points={{-39,48},{-39,48},{-34,48}},
          color={255,0,255},
          pattern=LinePattern.Dash));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,127,255},
              lineThickness=0.5,
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid), Text(
              extent={{-66,50},{62,-48}},
              lineColor={0,127,255},
              lineThickness=0.5,
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="CyclingControl"),
            Text(
              extent={{-154,102},{146,142}},
              textString="%name",
              textColor={0,0,255})}),        Diagram(coordinateSystem(
              preserveAspectRatio=false)));
    end CyclingOn;

    model VAVDualFanControl
      import BuildingControlEmulator =
             MultizoneOfficeComplexAir.BaseClasses.HVACSide.BaseClasses.Component;
      parameter Real k(min=0, unit="1") = 1 "Gain of controller";
      parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small) = 0.5
        "Time constant of Integrator block";
      parameter Modelica.Units.SI.Time waitTime(min=0) = 0
        "Wait time before transition fires";

      BuildingControlEmulator.FlowMover.Control.CyclingOn cyclingOn(waitTime=
            waitTime)
        annotation (Placement(transformation(extent={{-60,-40},{-40,-20}})));
      BuildingControlEmulator.conPI variableSpeed(
        yMin=0.3,
        k=k,
        Ti=Ti,
        conPID(y_reset=1))
        annotation (Placement(transformation(extent={{-60,36},{-40,56}})));
      Modelica.Blocks.Interfaces.BooleanInput On
        annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
      Modelica.Blocks.Interfaces.RealInput SetPoi
        "Connector of setpoint input signal"
        annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
      Modelica.Blocks.Interfaces.RealInput Mea
        "Connector of measurement input signal"
        annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
      Modelica.Blocks.Interfaces.RealOutput ySup "Connector of Real output signal"
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      Modelica.Blocks.Interfaces.BooleanInput CyclingOn
        annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
      Modelica.Blocks.Logical.Not not1
        annotation (Placement(transformation(extent={{-62,0},{-42,20}})));
      Buildings.Controls.OBC.CDL.Continuous.Switch swi
        annotation (Placement(transformation(extent={{12,28},{32,48}})));
      Buildings.Controls.OBC.CDL.Continuous.LimitSlewRate ramLim(raisingSlewRate=1/
            120) "Ramp limiter for fan control signal"
        annotation (Placement(transformation(extent={{40,-10},{60,10}})));
      Buildings.Controls.OBC.CDL.Continuous.Limiter lim(uMax=1, uMin=0)
        annotation (Placement(transformation(extent={{66,-10},{86,10}})));
      Modelica.Blocks.Math.BooleanToReal booToRea
        annotation (Placement(transformation(extent={{-20,-40},{0,-20}})));
    equation
      connect(variableSpeed.On, On) annotation (Line(
          points={{-62,52},{-80,52},{-80,60},{-120,60}},
          color={255,0,255}));
      connect(variableSpeed.mea, Mea) annotation (Line(
          points={{-62,40},{-70,40},{-70,-20},{-120,-20}},
          color={0,0,127}));
      connect(cyclingOn.CyclingOn, CyclingOn) annotation (Line(
          points={{-62,-30},{-80,-30},{-80,-60},{-120,-60}},
          color={255,0,255}));
      connect(not1.u, On) annotation (Line(
          points={{-64,10},{-80,10},{-80,60},{-120,60}},
          color={255,0,255}));
      connect(not1.y, cyclingOn.OnSigIn) annotation (Line(
          points={{-41,10},{-24,10},{-24,-8},{-80,-8},{-80,-26},{-62,-26}},
          color={255,0,255}));
      connect(variableSpeed.y, swi.u1)
        annotation (Line(points={{-39,46},{10,46}}, color={0,0,127}));
      connect(ramLim.y, lim.u)
        annotation (Line(points={{62,0},{64,0}},   color={0,0,127}));
      connect(lim.y, ySup) annotation (Line(points={{88,0},{110,0}},
            color={0,0,127}));
      connect(ramLim.u, swi.y) annotation (Line(points={{38,0},{36,0},{36,
              38},{34,38}}, color={0,0,127}));
      connect(SetPoi, variableSpeed.set) annotation (Line(points={{-120,20},
              {-74,20},{-74,46},{-62,46}}, color={0,0,127}));
      connect(On, swi.u2) annotation (Line(points={{-120,60},{-80,60},{-80,
              28},{-20,28},{-20,38},{10,38}}, color={255,0,255}));
      connect(cyclingOn.OnSigOut, booToRea.u)
        annotation (Line(points={{-39,-30},{-22,-30}}, color={255,0,255}));
      connect(booToRea.y, swi.u3) annotation (Line(points={{1,-30},{6,-30},{6,
              30},{10,30}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,127,255},
              lineThickness=0.5,
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid), Text(
              extent={{-66,50},{62,-48}},
              lineColor={0,127,255},
              lineThickness=0.5,
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="VAVDualFanControl"),
            Text(
              extent={{-154,102},{146,142}},
              textString="%name",
              textColor={0,0,255})}),            Diagram(coordinateSystem(
              preserveAspectRatio=false)),
        experiment(
          StartTime=15638400,
          StopTime=16243200,
          __Dymola_NumberOfIntervals=1440,
          __Dymola_Algorithm="Cvode"));
    end VAVDualFanControl;

    model TemperatureCheck "\"Controller for constant speed fans or pumps\""
      parameter Integer numTemp(min=1) = 1
          "The size of the temeprature vector";

      Modelica.Blocks.Interfaces.RealInput Temp[numTemp]
        "Connector of setpoint input signal"
        annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
      Modelica.Blocks.Interfaces.BooleanOutput On
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      Modelica.Blocks.Interfaces.RealInput CooSetPoi[numTemp]
        "Connector of setpoint input signal"
        annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
      Modelica.Blocks.Interfaces.RealInput HeaSetPoi[numTemp]
        "Connector of setpoint input signal"
        annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
      parameter Modelica.Units.SI.TemperatureDifference dTCycCon = 0.2
        "Temperature difference for trigerring the cycle control";
    algorithm
     for i in 1:numTemp loop
        if (Temp[i] > CooSetPoi[i] + dTCycCon) or (Temp[i] < HeaSetPoi[i] - dTCycCon) then
           On := true;
           break;
         end if;
       On := false;
       end for;

      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,127,255},
              lineThickness=0.5,
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid), Text(
              extent={{-66,50},{62,-48}},
              lineColor={0,127,255},
              lineThickness=0.5,
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="CyclingControl"),
            Text(
              extent={{-156,106},{144,146}},
              textString="%name",
              textColor={0,0,255})}),        Diagram(coordinateSystem(
              preserveAspectRatio=false)));
    end TemperatureCheck;

  end Control;

  package Pump
    "This package contains the modules which can be used to simulate the primary chilled water pump, the condenser water pump and the secondary chilled water pump"

    model SimPumpSystem
      "This model is used to simulate the primary chilled water pump and condenser water pump system"
        replaceable package Medium =
             Modelica.Media.Interfaces.PartialMedium "Medium water";
      parameter Modelica.Units.SI.MassFlowRate m_flow_nominal[n]
        "Rated mass flow rate";

        parameter Integer n= 2
        "the number of pumps";
        parameter Real Motor_eta[n,:] "Motor efficiency";
        parameter Real Hydra_eta[n,:] "Hydraulic efficiency";
      parameter Modelica.Units.SI.PressureDifference dp_nominal
        "Nominal pressure raise";

      Buildings.Fluid.Movers.FlowControlled_m_flow
                                           pumConSpe[n](redeclare package
          Medium =                                                                 Medium,
        m_flow_nominal=m_flow_nominal,
        per(
          use_powerCharacteristic=false,
          motorEfficiency(eta=Motor_eta),
          hydraulicEfficiency(eta=Hydra_eta)),
        dp_nominal=dp_nominal)                                                           "Constant Speed pump"
        annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
      Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium = Medium)
        "Fluid connector a (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium = Medium)
        "Fluid connector b (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{90,-10},{110,10}})));
      Modelica.Blocks.Interfaces.RealInput On[n] "On signal"    annotation (Placement(transformation(extent={{-118,51},
                {-100,69}})));

      Modelica.Blocks.Interfaces.RealOutput P[n]
        "Electric power consumed by compressor"
        annotation (Placement(transformation(extent={{100,30},{120,50}})));
      Modelica.Blocks.Math.Gain gain[n](k=m_flow_nominal)
        annotation (Placement(transformation(extent={{-80,50},{-60,70}})));

    equation

      for i in 1:n loop
        connect(pumConSpe[i].port_a, port_a);
        connect(pumConSpe[i].port_b, port_b);
        connect(pumConSpe[i].P, P[i]);

      end for;

      connect(gain.u, On)
        annotation (Line(
          points={{-82,60},{-109,60}},
          color={0,0,127}));
      connect(gain.y, pumConSpe.m_flow_in) annotation (Line(points={{-59,60},{-28,60},{0,60},{0,12}}, color={0,0,127}));

      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}})),                                                                               Icon(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
            Text(
              extent={{-40,-102},{46,-156}},
              lineColor={0,0,255},
              textString="%name"),
            Ellipse(
              extent={{-20,80},{20,40}},
              lineColor={0,0,255},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{16,60},{-8,48},{-8,70},{16,60}},
              lineColor={0,0,255},
              smooth=Smooth.None,
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Line(
              points={{-100,0},{-40,0},{-40,60}},
              color={0,0,255},
              smooth=Smooth.None),
            Line(
              points={{-40,60},{-20,60}},
              color={0,0,255},
              smooth=Smooth.None),
            Line(
              points={{-40,0},{-16,0}},
              color={0,0,255},
              smooth=Smooth.None),
            Line(
              points={{-40,0},{-40,-60},{-16,-60}},
              color={0,0,255},
              smooth=Smooth.None),
            Line(
              points={{20,60},{40,60},{40,-60},{14,-60}},
              color={0,0,255},
              smooth=Smooth.None),
            Line(
              points={{40,0},{14,0}},
              color={0,0,255},
              smooth=Smooth.None),
            Line(
              points={{40,0},{90,0}},
              color={0,0,255},
              smooth=Smooth.None),
            Ellipse(
              extent={{-20,20},{20,-20}},
              lineColor={0,0,255},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-20,-40},{20,-80}},
              lineColor={0,0,255},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{16,0},{-8,-12},{-8,10},{16,0}},
              lineColor={0,0,255},
              smooth=Smooth.None,
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{16,-60},{-8,-72},{-8,-50},{16,-60}},
              lineColor={0,0,255},
              smooth=Smooth.None,
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid)}),
        Documentation(revisions="<html>
<ul>
<li>
March 30, 2014 by Sen Huang:<br/>
First implementation.
</li>
</ul>
</html>"));
    end SimPumpSystem;

    model PumpSystem "This model is used to simulate the secondary chilled water pump"
        replaceable package Medium =
          Modelica.Media.Interfaces.PartialMedium  "Medium water";
        parameter Integer n= 2
        "the number of pumps";

      parameter Modelica.Units.SI.MassFlowRate m_flow_nominal[n];
      parameter Real HydEff[n,:] "Hydraulic efficiency";
      parameter Real MotEff[n,:] "Motor efficiency";
      parameter Modelica.Units.SI.VolumeFlowRate VolFloCur[n,:]
        "Volume flow rate curve";
      parameter Modelica.Units.SI.Pressure PreCur[n,:] "Pressure curve";
      MultizoneOfficeComplexAir.BaseClasses.HVACSide.BaseClasses.Component.FlowMover.BaseClasses.WithoutMotor
        pum[n](
        varSpeFloMov(addPowerToMedium=false),
        redeclare package Medium = Medium,
        HydEff=HydEff,
        MotEff=MotEff,
        VolFloCur=VolFloCur,
        PreCur=PreCur,
        TimCon=900)
        annotation (Placement(transformation(extent={{-12,-10},{10,10}})));
      Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium = Medium)
        "Fluid connector a (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium = Medium)
        "Fluid connector b (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{90,-10},{110,10}})));
      Modelica.Blocks.Interfaces.RealInput speSig[n] "On signal"
        annotation (Placement(transformation(extent={{-118,71},{-100,89}})));
      Modelica.Blocks.Interfaces.RealOutput speRat[n]
        "Speed of the pump divided by the nominal value"
        annotation (Placement(transformation(extent={{100,52},{120,72}})));
      Modelica.Blocks.Interfaces.RealOutput P[n]
        "Electric power consumed by compressor"
        annotation (Placement(transformation(extent={{100,-70},{120,-50}})));
      Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val[n](redeclare
          package Medium = Medium,
          m_flow_nominal=m_flow_nominal,
        dpValve_nominal=dpValve_nominal)
        annotation (Placement(transformation(extent={{42,-10},{62,10}})));
      BaseClasses.ValCon valCon(n=n)
        annotation (Placement(transformation(extent={{-10,50},{10,70}})));
      parameter Modelica.Units.SI.PressureDifference dpValve_nominal[n]
        "Nominal pressure drop of fully open valve, used if CvData=Buildings.Fluid.Types.CvTypes.OpPoint";
    equation

      for i in 1:n loop
       connect(pum[i].Rat,speRat [i]);
       connect(pum[i].port_a, port_a);
       connect(val[i].port_b, port_b);
       connect(pum[i].P, P[i]);
         connect(pum[i].port_b, val[i].port_a);
      end for;

      connect(pum.u,speSig)  annotation (Line(
          points={{-13.1,6},{-80,6},{-80,80},{-109,80}},
          color={0,0,127}));
      connect(valCon.On,speSig)  annotation (Line(
          points={{-10.9,60},{-60,60},{-60,80},{-109,80}},
          color={0,0,127}));
      connect(valCon.y, val.y) annotation (Line(
          points={{10.9,60},{52,60},{52,12}},
          color={0,0,127}));
      annotation (Icon(graphics={
            Text(
              extent={{-152,104},{148,144}},
              textString="%name",
              textColor={0,0,255}),
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid)}));
    end PumpSystem;

    package Control

      model SecPumCon "This model is used for secondary chilled water pump control."
        parameter Real tWai = 300 "Waiting time";

          parameter Integer n=3
          "the number of pumps";
        WaterSide.Control.PumpStageN pumSta(
          tWai=tWai,
          thehol_up=0.9,
          n=n,
          thehol_down=0.6)
          annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));
        Modelica.Blocks.Interfaces.BooleanInput On "On signal"
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealInput sta[n] "Speeds of pumps"
          annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
        Modelica.Blocks.Interfaces.RealInput dpMea "Measured pressure drop"
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Math.Product product[n]
          annotation (Placement(transformation(extent={{20,40},{40,60}})));
        Modelica.Blocks.Interfaces.RealOutput y[n] "Connector of Real output signal"
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));

        Modelica.Blocks.Routing.Replicator replicator(nout=n)
          annotation (Placement(transformation(extent={{56,-40},{76,-20}})));
        MultizoneOfficeComplexAir.BaseClasses.HVACSide.BaseClasses.Component.conPI
          conPI(k=0.001, Ti=60)
          annotation (Placement(transformation(extent={{18,-20},{38,0}})));
        Modelica.Blocks.Interfaces.RealInput dpSet
          "Static differential pressure setpoint for the secondary pump"
          annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
      equation
        connect(pumSta.On, On) annotation (Line(points={{-52,8},{-66,8},{-80,
                8},{-80,80},{-120,80}}, color={255,0,255}));
        connect(pumSta.sta, sta) annotation (Line(points={{-52,-8},{-80,-8},{
                -80,-80},{-120,-80}}, color={0,0,127}));
        connect(product.y, y) annotation (Line(
            points={{41,50},{60,50},{80,50},{80,0},{110,0}},
            color={0,0,127}));
        connect(pumSta.y, product.u1) annotation (Line(points={{-29,0},{0,0},
                {0,56},{18,56}}, color={0,0,127}));
        connect(replicator.y, product.u2) annotation (Line(
            points={{77,-30},{90,-30},{90,-12},{58,-12},{58,24},{8,24},{8,44},{18,44}},
            color={0,0,127}));

        connect(conPI.On, On) annotation (Line(
            points={{16,-4},{-20,-4},{-20,80},{-120,80}},
            color={255,0,255}));
        connect(conPI.y, replicator.u) annotation (Line(
            points={{39,-10},{46,-10},{46,-30},{54,-30}},
            color={0,0,127}));
        connect(conPI.mea, dpMea) annotation (Line(points={{16,-16},{-92,-16},
                {-92,0},{-120,0}}, color={0,0,127}));
        connect(conPI.set, dpSet) annotation (Line(points={{16,-10},{-20,-10},
                {-20,-40},{-120,-40}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-156,104},{144,144}},
                textString="%name",
                textColor={0,0,255})}),           Diagram(coordinateSystem(
                preserveAspectRatio=false)));
      end SecPumCon;

    end Control;

    package BaseClasses

      model ValCon
          parameter Integer n= 2
          "the number of pumps";

        Modelica.Blocks.Interfaces.RealInput On[n] "On signal"    annotation (Placement(transformation(extent={{-118,-9},
                  {-100,9}})));
        Modelica.Blocks.Interfaces.RealOutput y[n] "On signal"
          annotation (Placement(transformation(extent={{100,-9},{118,9}})));

      equation

          for i in 1:n loop
            y[i] =noEvent(if On[i]>0.01 then 1 else 0);
          end for;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,102},{150,142}},
                textString="%name",
                textColor={0,0,255})}),           Diagram(coordinateSystem(
                preserveAspectRatio=false)));
      end ValCon;
    end BaseClasses;

  annotation ();
  end Pump;
end FlowMover;
